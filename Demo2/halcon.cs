//
// File generated by HDevelop for HALCON/.NET (C#) Version 20.11.1.0
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

  // Procedures 
  // External procedures 
  // Chapter: Graphics / Text
  // Short Description: This procedure writes one or multiple text messages. 
  public void disp_message (HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem, 
      HTuple hv_Row, HTuple hv_Column, HTuple hv_Color, HTuple hv_Box)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamName = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple   hv_Color_COPY_INP_TMP = new HTuple(hv_Color);
    HTuple   hv_Column_COPY_INP_TMP = new HTuple(hv_Column);
    HTuple   hv_CoordSystem_COPY_INP_TMP = new HTuple(hv_CoordSystem);
    HTuple   hv_Row_COPY_INP_TMP = new HTuple(hv_Row);

    // Initialize local and output iconic variables 
    try
    {
      //This procedure displays text in a graphics window.
      //
      //Input parameters:
      //WindowHandle: The WindowHandle of the graphics window, where
      //   the message should be displayed.
      //String: A tuple of strings containing the text messages to be displayed.
      //CoordSystem: If set to 'window', the text position is given
      //   with respect to the window coordinate system.
      //   If set to 'image', image coordinates are used.
      //   (This may be useful in zoomed images.)
      //Row: The row coordinate of the desired text position.
      //   You can pass a single value or a tuple of values.
      //   See the explanation below.
      //   Default: 12.
      //Column: The column coordinate of the desired text position.
      //   You can pass a single value or a tuple of values.
      //   See the explanation below.
      //   Default: 12.
      //Color: defines the color of the text as string.
      //   If set to [] or '' the currently set color is used.
      //   If a tuple of strings is passed, the colors are used cyclically
      //   for every text position defined by Row and Column,
      //   or every new text line in case of |Row| == |Column| == 1.
      //Box: A tuple controlling a possible box surrounding the text.
      //   Its entries:
      //   - Box[0]: Controls the box and its color. Possible values:
      //     -- 'true' (Default): An orange box is displayed.
      //     -- 'false': No box is displayed.
      //     -- color string: A box is displayed in the given color, e.g., 'white', '#FF00CC'.
      //   - Box[1] (Optional): Controls the shadow of the box. Possible values:
      //     -- 'true' (Default): A shadow is displayed in
      //               darker orange if Box[0] is not a color and in 'white' otherwise.
      //     -- 'false': No shadow is displayed.
      //     -- color string: A shadow is displayed in the given color, e.g., 'white', '#FF00CC'.
      //
      //It is possible to display multiple text strings in a single call.
      //In this case, some restrictions apply on the
      //parameters String, Row, and Column:
      //They can only have either 1 entry or n entries.
      //Behavior in the different cases:
      //   - Multiple text positions are specified, i.e.,
      //       - |Row| == n, |Column| == n
      //       - |Row| == n, |Column| == 1
      //       - |Row| == 1, |Column| == n
      //     In this case we distinguish:
      //       - |String| == n: Each element of String is displayed
      //                        at the corresponding position.
      //       - |String| == 1: String is displayed n times
      //                        at the corresponding positions.
      //   - Exactly one text position is specified,
      //      i.e., |Row| == |Column| == 1:
      //      Each element of String is display in a new textline.
      //
      //
      //Convert the parameters for disp_text.
      if ((int)((new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
          new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(new HTuple())))) != 0)
      {

        hv_Color_COPY_INP_TMP.Dispose();
        hv_Column_COPY_INP_TMP.Dispose();
        hv_CoordSystem_COPY_INP_TMP.Dispose();
        hv_Row_COPY_INP_TMP.Dispose();
        hv_GenParamName.Dispose();
        hv_GenParamValue.Dispose();

        return;
      }
      if ((int)(new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(-1))) != 0)
      {
        hv_Row_COPY_INP_TMP.Dispose();
        hv_Row_COPY_INP_TMP = 12;
      }
      if ((int)(new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(-1))) != 0)
      {
        hv_Column_COPY_INP_TMP.Dispose();
        hv_Column_COPY_INP_TMP = 12;
      }
      //
      //Convert the parameter Box to generic parameters.
      hv_GenParamName.Dispose();
      hv_GenParamName = new HTuple();
      hv_GenParamValue.Dispose();
      hv_GenParamValue = new HTuple();
      if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(0))) != 0)
      {
        if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleEqual("false"))) != 0)
        {
          //Display no box
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "box");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              "false");
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
        else if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleNotEqual(
            "true"))) != 0)
        {
          //Set a color other than the default.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "box_color");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              hv_Box.TupleSelect(0));
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
      }
      if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(1))) != 0)
      {
        if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleEqual("false"))) != 0)
        {
          //Display no shadow.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "shadow");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              "false");
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
        else if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleNotEqual(
            "true"))) != 0)
        {
          //Set a shadow color other than the default.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "shadow_color");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              hv_Box.TupleSelect(1));
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
      }
      //Restore default CoordSystem behavior.
      if ((int)(new HTuple(hv_CoordSystem_COPY_INP_TMP.TupleNotEqual("window"))) != 0)
      {
        hv_CoordSystem_COPY_INP_TMP.Dispose();
        hv_CoordSystem_COPY_INP_TMP = "image";
      }
      //
      if ((int)(new HTuple(hv_Color_COPY_INP_TMP.TupleEqual(""))) != 0)
      {
        //disp_text does not accept an empty string for Color.
        hv_Color_COPY_INP_TMP.Dispose();
        hv_Color_COPY_INP_TMP = new HTuple();
      }
      //
      HOperatorSet.DispText(hv_WindowHandle, hv_String, hv_CoordSystem_COPY_INP_TMP, 
          hv_Row_COPY_INP_TMP, hv_Column_COPY_INP_TMP, hv_Color_COPY_INP_TMP, hv_GenParamName, 
          hv_GenParamValue);

      hv_Color_COPY_INP_TMP.Dispose();
      hv_Column_COPY_INP_TMP.Dispose();
      hv_CoordSystem_COPY_INP_TMP.Dispose();
      hv_Row_COPY_INP_TMP.Dispose();
      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Color_COPY_INP_TMP.Dispose();
      hv_Column_COPY_INP_TMP.Dispose();
      hv_CoordSystem_COPY_INP_TMP.Dispose();
      hv_Row_COPY_INP_TMP.Dispose();
      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Text
  // Short Description: Set font independent of OS 
  public void set_display_font (HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font, 
      HTuple hv_Bold, HTuple hv_Slant)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_OS = new HTuple(), hv_Fonts = new HTuple();
    HTuple hv_Style = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_AvailableFonts = new HTuple(), hv_Fdx = new HTuple();
    HTuple hv_Indices = new HTuple();
    HTuple   hv_Font_COPY_INP_TMP = new HTuple(hv_Font);
    HTuple   hv_Size_COPY_INP_TMP = new HTuple(hv_Size);

    // Initialize local and output iconic variables 
    try
    {
      //This procedure sets the text font of the current window with
      //the specified attributes.
      //
      //Input parameters:
      //WindowHandle: The graphics window for which the font will be set
      //Size: The font size. If Size=-1, the default of 16 is used.
      //Bold: If set to 'true', a bold font is used
      //Slant: If set to 'true', a slanted font is used
      //
      hv_OS.Dispose();
      HOperatorSet.GetSystem("operating_system", out hv_OS);
      if ((int)((new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
          new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(-1)))) != 0)
      {
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = 16;
      }
      if ((int)(new HTuple(((hv_OS.TupleSubstr(0,2))).TupleEqual("Win"))) != 0)
      {
        //Restore previous behaviour
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Size = ((1.13677*hv_Size_COPY_INP_TMP)).TupleInt()
            ;
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = ExpTmpLocalVar_Size;
        }
        }
      }
      else
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Size = hv_Size_COPY_INP_TMP.TupleInt()
            ;
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = ExpTmpLocalVar_Size;
        }
        }
      }
      if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("Courier"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Courier";
        hv_Fonts[1] = "Courier 10 Pitch";
        hv_Fonts[2] = "Courier New";
        hv_Fonts[3] = "CourierNew";
        hv_Fonts[4] = "Liberation Mono";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Consolas";
        hv_Fonts[1] = "Menlo";
        hv_Fonts[2] = "Courier";
        hv_Fonts[3] = "Courier 10 Pitch";
        hv_Fonts[4] = "FreeMono";
        hv_Fonts[5] = "Liberation Mono";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Luxi Sans";
        hv_Fonts[1] = "DejaVu Sans";
        hv_Fonts[2] = "FreeSans";
        hv_Fonts[3] = "Arial";
        hv_Fonts[4] = "Liberation Sans";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Times New Roman";
        hv_Fonts[1] = "Luxi Serif";
        hv_Fonts[2] = "DejaVu Serif";
        hv_Fonts[3] = "FreeSerif";
        hv_Fonts[4] = "Utopia";
        hv_Fonts[5] = "Liberation Serif";
      }
      else
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple(hv_Font_COPY_INP_TMP);
      }
      hv_Style.Dispose();
      hv_Style = "";
      if ((int)(new HTuple(hv_Bold.TupleEqual("true"))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Style = hv_Style+"Bold";
        hv_Style.Dispose();
        hv_Style = ExpTmpLocalVar_Style;
        }
        }
      }
      else if ((int)(new HTuple(hv_Bold.TupleNotEqual("false"))) != 0)
      {
        hv_Exception.Dispose();
        hv_Exception = "Wrong value of control parameter Bold";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Slant.TupleEqual("true"))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Style = hv_Style+"Italic";
        hv_Style.Dispose();
        hv_Style = ExpTmpLocalVar_Style;
        }
        }
      }
      else if ((int)(new HTuple(hv_Slant.TupleNotEqual("false"))) != 0)
      {
        hv_Exception.Dispose();
        hv_Exception = "Wrong value of control parameter Slant";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Style.TupleEqual(""))) != 0)
      {
        hv_Style.Dispose();
        hv_Style = "Normal";
      }
      hv_AvailableFonts.Dispose();
      HOperatorSet.QueryFont(hv_WindowHandle, out hv_AvailableFonts);
      hv_Font_COPY_INP_TMP.Dispose();
      hv_Font_COPY_INP_TMP = "";
      for (hv_Fdx=0; (int)hv_Fdx<=(int)((new HTuple(hv_Fonts.TupleLength()))-1); hv_Fdx = (int)hv_Fdx + 1)
      {
        hv_Indices.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices = hv_AvailableFonts.TupleFind(
            hv_Fonts.TupleSelect(hv_Fdx));
        }
        if ((int)(new HTuple((new HTuple(hv_Indices.TupleLength())).TupleGreater(
            0))) != 0)
        {
          if ((int)(new HTuple(((hv_Indices.TupleSelect(0))).TupleGreaterEqual(0))) != 0)
          {
            hv_Font_COPY_INP_TMP.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Font_COPY_INP_TMP = hv_Fonts.TupleSelect(
                hv_Fdx);
            }
            break;
          }
        }
      }
      if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual(""))) != 0)
      {
        throw new HalconException("Wrong value of control parameter Font");
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Font = (((hv_Font_COPY_INP_TMP+"-")+hv_Style)+"-")+hv_Size_COPY_INP_TMP;
      hv_Font_COPY_INP_TMP.Dispose();
      hv_Font_COPY_INP_TMP = ExpTmpLocalVar_Font;
      }
      }
      HOperatorSet.SetFont(hv_WindowHandle, hv_Font_COPY_INP_TMP);

      hv_Font_COPY_INP_TMP.Dispose();
      hv_Size_COPY_INP_TMP.Dispose();
      hv_OS.Dispose();
      hv_Fonts.Dispose();
      hv_Style.Dispose();
      hv_Exception.Dispose();
      hv_AvailableFonts.Dispose();
      hv_Fdx.Dispose();
      hv_Indices.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Font_COPY_INP_TMP.Dispose();
      hv_Size_COPY_INP_TMP.Dispose();
      hv_OS.Dispose();
      hv_Fonts.Dispose();
      hv_Style.Dispose();
      hv_Exception.Dispose();
      hv_AvailableFonts.Dispose();
      hv_Fdx.Dispose();
      hv_Indices.Dispose();

      throw HDevExpDefaultException;
    }
  }

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Image, ho_GrayImage, ho_Rectangle;
    HObject ho_ImageReduced, ho_ImageScaleMax, ho_Region1, ho_RegionErosion;
    HObject ho_ConnectedRegions, ho_SelectedRegions;

    // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_WindowHandle = new HTuple(), hv_Row1 = new HTuple();
    HTuple hv_Column1 = new HTuple(), hv_Row2 = new HTuple();
    HTuple hv_Column2 = new HTuple(), hv_UsedThreshold = new HTuple();
    HTuple hv_Number = new HTuple(), hv_WindowHandle1 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_GrayImage);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_ImageScaleMax);
    HOperatorSet.GenEmptyObj(out ho_Region1);
    HOperatorSet.GenEmptyObj(out ho_RegionErosion);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    try
    {
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, "E:/BaiduNetdiskDownload/综合训练软件/棒材图片/01.jpg");
      ho_GrayImage.Dispose();
      HOperatorSet.Rgb1ToGray(ho_Image, out ho_GrayImage);
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_GrayImage, out hv_Width, out hv_Height);
      HOperatorSet.SetWindowAttr("background_color","black");
      HOperatorSet.OpenWindow(0,0,hv_Width*0.5,hv_Height*0.5,0,"visible","",out hv_WindowHandle);
      HDevWindowStack.Push(hv_WindowHandle);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_GrayImage, HDevWindowStack.GetActive());
      }

      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
      }
      hv_Row1.Dispose();hv_Column1.Dispose();hv_Row2.Dispose();hv_Column2.Dispose();
      HOperatorSet.DrawRectangle1(hv_WindowHandle, out hv_Row1, out hv_Column1, out hv_Row2, 
          out hv_Column2);
      ho_Rectangle.Dispose();
      HOperatorSet.GenRectangle1(out ho_Rectangle, hv_Row1, hv_Column1, hv_Row2, 
          hv_Column2);
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_GrayImage, ho_Rectangle, out ho_ImageReduced);

      ho_ImageScaleMax.Dispose();
      HOperatorSet.ScaleImageMax(ho_ImageReduced, out ho_ImageScaleMax);

      ho_Region1.Dispose();hv_UsedThreshold.Dispose();
      HOperatorSet.BinaryThreshold(ho_ImageScaleMax, out ho_Region1, "max_separability", 
          "light", out hv_UsedThreshold);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "fill");
      }
      ho_RegionErosion.Dispose();
      HOperatorSet.ErosionCircle(ho_Region1, out ho_RegionErosion, 20);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ErosionCircle(ho_RegionErosion, out ExpTmpOutVar_0, 20);
      ho_RegionErosion.Dispose();
      ho_RegionErosion = ExpTmpOutVar_0;
      }
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionErosion, out ho_ConnectedRegions);

      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
          "and", 500, 5000);
      hv_Number.Dispose();
      HOperatorSet.CountObj(ho_SelectedRegions, out hv_Number);

      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "fill");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColor(HDevWindowStack.GetActive(), "magenta");
      }
      HOperatorSet.SetWindowAttr("background_color","black");
      HOperatorSet.OpenWindow(0,0,hv_Width*0.5,hv_Height*0.5,0,"visible","",out hv_WindowHandle1);
      HDevWindowStack.Push(hv_WindowHandle1);
      set_display_font(hv_WindowHandle1, 16, "mono", "true", "false");
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_SelectedRegions, HDevWindowStack.GetActive());
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      disp_message(hv_WindowHandle1, "检测数量"+hv_Number, "window", 10, 10, 
          "red", "true");
      }

    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_GrayImage.Dispose();
      ho_Rectangle.Dispose();
      ho_ImageReduced.Dispose();
      ho_ImageScaleMax.Dispose();
      ho_Region1.Dispose();
      ho_RegionErosion.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();

      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_WindowHandle.Dispose();
      hv_Row1.Dispose();
      hv_Column1.Dispose();
      hv_Row2.Dispose();
      hv_Column2.Dispose();
      hv_UsedThreshold.Dispose();
      hv_Number.Dispose();
      hv_WindowHandle1.Dispose();

      throw HDevExpDefaultException;
    }
    ho_Image.Dispose();
    ho_GrayImage.Dispose();
    ho_Rectangle.Dispose();
    ho_ImageReduced.Dispose();
    ho_ImageScaleMax.Dispose();
    ho_Region1.Dispose();
    ho_RegionErosion.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();

    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_WindowHandle.Dispose();
    hv_Row1.Dispose();
    hv_Column1.Dispose();
    hv_Row2.Dispose();
    hv_Column2.Dispose();
    hv_UsedThreshold.Dispose();
    hv_Number.Dispose();
    hv_WindowHandle1.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

